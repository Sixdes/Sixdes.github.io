<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[matplotlib 使用]]></title>
      <url>http://yoursite.com/2017/12/22/matplotlib%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>python-matplotlib</p>
<a id="more"></a>
<h1 id="python-matplotlib-jupyter"><a href="#python-matplotlib-jupyter" class="headerlink" title="python matplotlib jupyter"></a>python matplotlib jupyter</h1><p>matplotlib 是 python 的 著名数据可视化工具包</p>
<h2 id="2D图表"><a href="#2D图表" class="headerlink" title="2D图表"></a>2D图表</h2><p>Matplotlib中最基础的模块是pyplot。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 有一组数据，还有一个拟合模型，通过下面的代码图来可视化</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 通过rcParams设置全局横纵轴字体大小</span></div><div class="line">mpl.rcParams[<span class="string">'xtick.labelsize'</span>] = <span class="number">24</span></div><div class="line">mpl.rcParams[<span class="string">'ytick.labelsize'</span>] = <span class="number">24</span></div><div class="line"></div><div class="line">np.random.seed(<span class="number">42</span>)</div><div class="line"><span class="comment"># x 轴的采样点</span></div><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">100</span>)</div><div class="line"><span class="comment"># 通过下面曲线加上噪声生成数据，所以拟合模型就用y了……</span></div><div class="line">y = <span class="number">2</span>*np.sin(x) + <span class="number">0.3</span>*x**<span class="number">2</span></div><div class="line">y_data = y + np.random.normal(scale=<span class="number">0.3</span>, size=<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="comment"># figure() 指定图表名称</span></div><div class="line">plt.figure(<span class="string">'data'</span>)</div><div class="line"></div><div class="line"><span class="comment"># '.'标明画散点图，每个散点的形状是个圆</span></div><div class="line">plt.plot(x, y_data, <span class="string">'.'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 画模型的图，plot函数默认画连线图</span></div><div class="line">plt.figure(<span class="string">'model'</span>)</div><div class="line">plt.plot(x, y)</div><div class="line"></div><div class="line"><span class="comment"># 两个图画一起</span></div><div class="line">plt.figure(<span class="string">'data &amp; model'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 通过'k'指定线的颜色，lw指定线的宽度</span></div><div class="line"><span class="comment"># 第三个参数除了颜色也可以指定线形，比如'r--'表示红色虚线</span></div><div class="line"><span class="comment"># 更多属性可以参考官网：http://matplotlib.org/api/pyplot_api.html</span></div><div class="line">plt.plot(x, y, <span class="string">'k'</span>, lw=<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># scatter可以更容易地生成散点图</span></div><div class="line">plt.scatter(x, y_data)</div><div class="line"></div><div class="line"><span class="comment"># 将当前figure的图保存到文件result.png</span></div><div class="line">plt.savefig(<span class="string">'result.png'</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_3_0.png" alt="output_3_0"></p>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_3_1.png" alt="output_3_1"></p>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_3_2.png" alt="output_3_2"></p>
<p>点和线图表只是最基本的用法，有的时候我们获取了分组数据要做对比，柱状或饼状类型的图</p>
<p>平时画图蹦出的一个窗口，这叫一个figure。Figure相当于一个大的画布，在每个figure中，又可以存在多个子图，这种子图叫做axes。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 全都是设置字的大小</span></div><div class="line">mpl.rcParams[<span class="string">'axes.titlesize'</span>] = <span class="number">13</span></div><div class="line">mpl.rcParams[<span class="string">'xtick.labelsize'</span>] = <span class="number">10</span></div><div class="line">mpl.rcParams[<span class="string">'ytick.labelsize'</span>] = <span class="number">10</span></div><div class="line">mpl.rcParams[<span class="string">'axes.labelsize'</span>] = <span class="number">10</span></div><div class="line">mpl.rcParams[<span class="string">'xtick.major.size'</span>] = <span class="number">0</span></div><div class="line">mpl.rcParams[<span class="string">'ytick.major.size'</span>] = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># 包含了狗，猫和猎豹的最高奔跑速度，还有对应的可视化颜色</span></div><div class="line">speed_map = &#123;</div><div class="line">  <span class="string">'dog'</span>: (<span class="number">48</span>, <span class="string">'#7199cf'</span>),</div><div class="line">  <span class="string">'cat'</span>: (<span class="number">45</span>, <span class="string">'#4fc4aa'</span>),</div><div class="line">  <span class="string">'cheetah'</span>: (<span class="number">120</span>, <span class="string">'#e1a7a2'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># 整体图的标题</span></div><div class="line">fig = plt.figure(<span class="string">'Bar chart &amp; Pie chart'</span>, figsize=(<span class="number">12</span>,<span class="number">6</span>))</div><div class="line"></div><div class="line"><span class="comment"># 在整张图上加入一个子图，121的意思是在一个1行2列的子图中的第一张</span></div><div class="line">ax = fig.add_subplot(<span class="number">121</span>)</div><div class="line">ax.set_title(<span class="string">'Running speed - bar chart'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 生成x轴每个元素的位置</span></div><div class="line">xticks = np.arange(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义柱状图每个柱的宽度</span></div><div class="line">bar_width = <span class="number">0.5</span></div><div class="line"></div><div class="line"><span class="comment"># 动物名称</span></div><div class="line">animals = speed_map.keys()</div><div class="line"></div><div class="line"><span class="comment"># 奔跑速度</span></div><div class="line">speeds = [x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> speed_map.values()]</div><div class="line"></div><div class="line"><span class="comment"># 对应颜色</span></div><div class="line">colors = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> speed_map.values()]</div><div class="line"></div><div class="line"><span class="comment"># 画柱状图，横轴是动物标签的位置，纵轴是速度，定义柱的宽度，同时设置柱的边缘为透明</span></div><div class="line">bars = ax.bar(xticks, speeds, width=bar_width, edgecolor=<span class="string">'none'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 设置y轴的标题</span></div><div class="line">ax.set_ylabel(<span class="string">'Speed(km/h)'</span>)</div><div class="line"></div><div class="line"><span class="comment"># x轴每个标签的具体位置，设置为每个柱的中央</span></div><div class="line">ax.set_xticks(xticks)</div><div class="line"></div><div class="line"><span class="comment"># 设置每个标签的名字</span></div><div class="line">ax.set_xticklabels(animals)</div><div class="line"></div><div class="line"><span class="comment"># 设置x轴的范围 ---轴不变, 在轴上显示多少, 直接决定柱子好不好看</span></div><div class="line">ax.set_xlim([bar_width/<span class="number">2</span><span class="number">-1</span>, <span class="number">3</span>-bar_width/<span class="number">2</span>])</div><div class="line"></div><div class="line"><span class="comment"># 设置y轴的范围</span></div><div class="line">ax.set_ylim([<span class="number">0</span>, <span class="number">125</span>])</div><div class="line"></div><div class="line"><span class="comment"># 给每个bar分配指定的颜色</span></div><div class="line"><span class="keyword">for</span> bar, color <span class="keyword">in</span> zip(bars, colors):</div><div class="line">    bar.set_color(color)</div><div class="line">    </div><div class="line"><span class="comment"># 在122位置加入新的图</span></div><div class="line">ax = fig.add_subplot(<span class="number">122</span>)</div><div class="line">ax.set_title(<span class="string">'Running speed - pie chart'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 生成同时包含名称和速度的标签</span></div><div class="line">labels = [<span class="string">'&#123;&#125;\n&#123;&#125; km/h'</span>.format(animal, speed) <span class="keyword">for</span> animal, speed <span class="keyword">in</span> zip(animals, speeds)]</div><div class="line"></div><div class="line"><span class="comment"># 画饼状图，并指定标签和对应颜色</span></div><div class="line">ax.pie(speeds, labels=labels, colors=colors)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_5_0.png" alt="output_5_0"></p>
<h2 id="3D-图表"><a href="#3D-图表" class="headerlink" title="3D 图表"></a>3D 图表</h2><p>Matplotlib中也能支持一些基础的3D图表，比如曲面图，散点图和柱状图。这些3D图表需要使用mpl_toolkits模块</p>
<blockquote>
<p>python2 python3 原来1/2（两个整数相除）结果是0，现在是0.5了<br>python 2.2+ 以上都可以使用 from <strong>future</strong> import division 实现改特性, 同时注意 // 取代了之前的 / 运算</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 3D图标必须的模块，project='3d'的定义</span></div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"></div><div class="line">np.random.seed(<span class="number">42</span>)</div><div class="line">n_grids = <span class="number">51</span>        <span class="comment"># x-y平面的格点数 </span></div><div class="line">c = n_grids//<span class="number">2</span>    	<span class="comment"># 中心位置</span></div><div class="line">nf = <span class="number">2</span>             	<span class="comment"># 低频成分的个数</span></div><div class="line"></div><div class="line"><span class="comment"># 生成格点</span></div><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, n_grids)</div><div class="line">y = np.linspace(<span class="number">0</span>, <span class="number">1</span>, n_grids)</div><div class="line"></div><div class="line"><span class="comment"># x和y是长度为n_grids的array</span></div><div class="line"><span class="comment"># meshgrid会把x和y组合成n_grids*n_grids的array，X和Y对应位置就是所有格点的坐标</span></div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line"></div><div class="line"><span class="comment"># 生成一个0值的傅里叶谱</span></div><div class="line">spectrum = np.zeros((n_grids, n_grids), dtype=np.complex)</div><div class="line"></div><div class="line"><span class="comment"># 生成一段噪音，长度是(2*nf+1)**2/2</span></div><div class="line"><span class="comment">#noise = [np.complex(x, y) for x, y in np.random.uniform(-1, 1, ((2*nf+1)**2/2, 2))]</span></div><div class="line">noise = [np.complex(x, y) <span class="keyword">for</span> x, y <span class="keyword">in</span> np.random.uniform(<span class="number">-1</span>,<span class="number">1</span>,((<span class="number">2</span>*nf+<span class="number">1</span>)**<span class="number">2</span>//<span class="number">2</span>, <span class="number">2</span>))]</div><div class="line"></div><div class="line"><span class="comment"># 傅里叶频谱的每一项和其共轭关于中心对称</span></div><div class="line">noise_block = np.concatenate((noise, [<span class="number">0j</span>], np.conjugate(noise[::<span class="number">-1</span>])))</div><div class="line"></div><div class="line"><span class="comment"># 将生成的频谱作为低频成分</span></div><div class="line">spectrum[c-nf:(c+nf+<span class="number">1</span>), c-nf:c+nf+<span class="number">1</span>] = noise_block.reshape((<span class="number">2</span>*nf+<span class="number">1</span>, <span class="number">2</span>*nf+<span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># 进行反傅里叶变换</span></div><div class="line">Z = np.real(np.fft.ifft2(np.fft.ifftshift(spectrum)))</div><div class="line"></div><div class="line"><span class="comment"># 创建图表</span></div><div class="line">fig = plt.figure(<span class="string">'3D surface &amp; wire'</span>, figsize=(<span class="number">12</span>, <span class="number">6</span>))</div><div class="line"></div><div class="line"><span class="comment"># 第一个子图，surface图</span></div><div class="line">ax = fig.add_subplot(<span class="number">121</span>, projection=<span class="string">'3d'</span>)</div><div class="line"></div><div class="line"><span class="comment"># alpha定义透明度，cmap是color map</span></div><div class="line"><span class="comment"># rstride和cstride是两个方向上的采样，越小越精细，lw是线宽</span></div><div class="line">ax.plot_surface(X, Y, Z, alpha=<span class="number">0.7</span>, cmap=<span class="string">'jet'</span>, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, lw=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 第二个子图，网线图</span></div><div class="line">ax = fig.add_subplot(<span class="number">122</span>, projection=<span class="string">'3d'</span>)</div><div class="line">ax.plot_wireframe(X, Y, Z, rstride=<span class="number">3</span>, cstride=<span class="number">3</span>, lw=<span class="number">0.5</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_7_0.png" alt="output_7_0"></p>
<p><strong>3D的散点图</strong></p>
<p>也是常常用来查看空间样本分布的一种手段，并且画起来比表面图和网线图更加简单</p>
<p>这个例子中，为了方便，直接先采样了一堆3维的正态分布样本，保证方向上的均匀性。然后归一化，让每个样本到原点的距离为1，相当于得到了一个均匀分布在球面上的样本。再接着把每个样本都乘上一个均匀分布随机数的开3次方，这样就得到了在球体内均匀分布的样本，最后根据判别平面3x+2y-z-1=0对平面两侧样本用不同的形状和颜色画出，图像如下：</p>
<blockquote>
<p>shape[0]  看行数, 即第一维数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"></div><div class="line">np.random.seed(<span class="number">42</span>)</div><div class="line"></div><div class="line"><span class="comment"># 采样个数500</span></div><div class="line">n_samples = <span class="number">500</span></div><div class="line">dim = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment"># 先生成一组3维正态分布数据，数据方向完全随机</span></div><div class="line">samples = np.random.multivariate_normal(</div><div class="line">    np.zeros(dim),</div><div class="line">    np.eye(dim),</div><div class="line">    n_samples</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># 通过把每个样本到原点距离和均匀分布吻合得到球体内均匀分布的样本</span></div><div class="line"><span class="comment"># samples[i] / np.linalg.norm(samples[i]) 归一化  (二范数是向量长度)</span></div><div class="line"><span class="comment"># r 一个均匀分布随机数的开3次方</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(samples.shape[<span class="number">0</span>]):</div><div class="line">    r = np.power(np.random.random(), <span class="number">1.0</span>/<span class="number">3.0</span>)</div><div class="line">    samples[i] *= r / np.linalg.norm(samples[i])</div><div class="line"></div><div class="line">upper_samples = []</div><div class="line">lower_samples = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> x, y, z <span class="keyword">in</span> samples:</div><div class="line">     <span class="comment"># 3x+2y-z=1作为判别平面</span></div><div class="line">    <span class="keyword">if</span> z &gt; <span class="number">3</span>*x + <span class="number">2</span>*y - <span class="number">1</span>:</div><div class="line">        upper_samples.append((x, y, z))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        lower_samples.append((x, y, z))</div><div class="line">        </div><div class="line">fig = plt.figure(<span class="string">'3D scatter plot'</span>)</div><div class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</div><div class="line">uppers = np.array(upper_samples)</div><div class="line">lowers = np.array(lower_samples)</div><div class="line"></div><div class="line"><span class="comment"># 用不同颜色不同形状的图标表示平面上下的样本</span></div><div class="line"><span class="comment"># 判别平面上半部分为红色圆点，下半部分为绿色三角</span></div><div class="line">ax.scatter(uppers[:, <span class="number">0</span>], uppers[:, <span class="number">1</span>], uppers[:, <span class="number">2</span>], c=<span class="string">'r'</span>, marker=<span class="string">'o'</span>)</div><div class="line">ax.scatter(lowers[:, <span class="number">0</span>], lowers[:, <span class="number">1</span>], lowers[:, <span class="number">2</span>], c=<span class="string">'g'</span>, marker=<span class="string">'^'</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_9_0.png" alt="output_9_0"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>)</div><div class="line">y = np.linspace(<span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>)</div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line">X.shape[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 展示画一个3d图</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="comment"># 导入3D 包</span></div><div class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</div><div class="line"></div><div class="line"><span class="comment"># 将会话框进行对象化</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 将对话框划分为一个子图, 并指定为3d图</span></div><div class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义 x, y, z 三个坐标轴的数据集</span></div><div class="line">U = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]</div><div class="line">V = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line">W = [<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 用函数填满 4个点组成的三角形空间</span></div><div class="line">ax.plot_trisurf(U, V, W)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_11_0.png" alt="output_11_0"></p>
<h2 id="图像显示"><a href="#图像显示" class="headerlink" title="图像显示"></a>图像显示</h2><p>Matplotlib也支持图像的存取和显示，并且和OpenCV一类的接口比起来，对于一般的二维矩阵的可视化要方便很多：</p>
<p>这段代码中第一个例子是读取一个本地图片并显示，第二个例子中直接把上小节中反傅里叶变换生成的矩阵作为图像拿过来，原图和经过乘以3再加4变换的图直接绘制了两个形状一样，但是值的范围不一样的图案。显示的时候imshow会自动进行归一化，把最亮的值显示为纯白，最暗的值显示为纯黑。这是一种非常方便的设定，尤其是查看深度学习中某个卷积层的响应图时。得到图像如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 读取一张手机的照片并显示</span></div><div class="line">plt.figure(<span class="string">'A little White iPhone'</span>)</div><div class="line">little_iPhone_img = plt.imread(<span class="string">'iPhone.png'</span>)</div><div class="line">plt.imshow(little_iPhone_img)</div><div class="line"></div><div class="line"><span class="comment"># Z是上小节生成的随机图案，img0就是Z，img1是Z做了个简单的变换</span></div><div class="line">img0 = Z</div><div class="line">img1 = <span class="number">3</span>*Z + <span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment"># cmap指定为'gray'用来显示灰度图</span></div><div class="line">fig = plt.figure(<span class="string">'Auto Normalized Visualization'</span>)</div><div class="line">ax0 = fig.add_subplot(<span class="number">121</span>)</div><div class="line">ax0.imshow(img0, cmap=<span class="string">'gray'</span>)</div><div class="line"></div><div class="line">ax1 = fig.add_subplot(<span class="number">122</span>)</div><div class="line">ax1.imshow(img1, cmap=<span class="string">'gray'</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_13_0.png" alt="output_13_0"></p>
<p><img src="/Users/yaoyirong/Documents/Record/Data mining/matplotlib 初接触/output_13_1.png" alt="output_13_1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[numpy 使用]]></title>
      <url>http://yoursite.com/2017/12/22/numpy%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>python-numpy 基础</p>
<a id="more"></a>
<h1 id="入门-numpy-篇"><a href="#入门-numpy-篇" class="headerlink" title="入门 numpy 篇"></a>入门 numpy 篇</h1><h2 id="numpy-篇"><a href="#numpy-篇" class="headerlink" title="numpy 篇"></a>numpy 篇</h2><p>array，也就是数组，是numpy中最基础的数据结构, 最关键的属性是<strong>维度</strong>和<strong>元素类型</strong>, 在numpy中，可以非常方便地创建各种不同类型的多维数组，并且执行一些基本基本操作</p>
<blockquote>
<p>array 维度 元素类型</p>
</blockquote>
<h3 id="基本类型（array"><a href="#基本类型（array" class="headerlink" title="基本类型（array)"></a>基本类型（array)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#%load douban.py</span></div><div class="line"><span class="comment"># run douban.py</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!python --version</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Python 2.7.10</div></pre></td></tr></table></figure>
<h4 id="创建数组-获取数组的属性"><a href="#创建数组-获取数组的属性" class="headerlink" title="创建数组, 获取数组的属性"></a>创建数组, 获取数组的属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)</div><div class="line"><span class="comment"># 在从1到3中产生9个数：(等差数列)</span></div><div class="line">np.linspace(<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建矩阵</span></div><div class="line">np.zeros((<span class="number">3</span>, <span class="number">4</span>))</div><div class="line"><span class="comment"># 2x2x3的无符号8位整型3维数组，并且初始化所有元素值为0</span></div><div class="line">g = np.zeros((<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>), dtype=np.uint8)</div><div class="line">print(g)</div><div class="line"> <span class="comment"># 用另一种类型表示</span></div><div class="line">g.astype(np.float)</div><div class="line"></div><div class="line">np.ones((<span class="number">3</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">np.eye(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 创建一个一维数组，元素值是把3重复4次，array([3, 3, 3, 3])</span></div><div class="line">np.repeat(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment"># 三维数组</span></div><div class="line">a = np.zeros((<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</div><div class="line"><span class="comment"># 数组的维数</span></div><div class="line">a.ndim</div><div class="line"><span class="comment"># 数组每一维的大小</span></div><div class="line">a.shape</div><div class="line"><span class="comment"># 数组的元素数</span></div><div class="line">a.size</div><div class="line"><span class="comment"># 元素类型  dtype('float64')</span></div><div class="line">a.dtype</div><div class="line"><span class="comment"># 每个元素所占的字节数 8</span></div><div class="line">a.itemsize</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[[0 0 0]</div><div class="line">  [0 0 0]]</div><div class="line"></div><div class="line"> [[0 0 0]</div><div class="line">  [0 0 0]]]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8</div></pre></td></tr></table></figure>
<p>load()和save()用Numpy专用的二进制格式保存数据，它们会自动处理元素类型和形状等信息。savez()提供了将多个数组存储至一个文件的能力，调用load()方法返回的对象，可以使用数组名对各个数组进行读取。默认数组名arr_0,arr_1,arr_2……</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关于文件</span></div><div class="line"><span class="comment"># 保存到文件</span></div><div class="line"><span class="comment"># 保存为二进制 第二个参数为要存的数组</span></div><div class="line">np.save(<span class="string">'p.npy'</span>, a)</div><div class="line"><span class="comment"># 保存为txt</span></div><div class="line">np.savetxt(<span class="string">'001'</span>, (<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>))</div><div class="line"></div><div class="line"><span class="comment"># 读取数据</span></div><div class="line">q = np.load(<span class="string">'p.npy'</span>)</div><div class="line">qq = np.loadtxt(<span class="string">'001'</span>)</div><div class="line">print(q)</div><div class="line">print(qq)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 11.  12.  13.]</div></pre></td></tr></table></figure>
<h4 id="数组索引，切片，赋值"><a href="#数组索引，切片，赋值" class="headerlink" title="数组索引，切片，赋值"></a>数组索引，切片，赋值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切片不能直接print</span></div><div class="line">a = np.array([[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]])</div><div class="line">print(a)</div><div class="line"><span class="comment"># 索引, 行列</span></div><div class="line">b = a[<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">print(b)</div><div class="line"><span class="comment"># 切片, 得到数组</span></div><div class="line">b = a[<span class="number">1</span>,:]</div><div class="line">print(b)</div><div class="line"><span class="comment"># 切片, 得到数组</span></div><div class="line">b = a[<span class="number">1</span>, <span class="number">1</span>:<span class="number">2</span>]</div><div class="line">print(b)</div><div class="line">a[<span class="number">1</span>,:] = [<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</div><div class="line">print(a)</div><div class="line"></div><div class="line"><span class="comment"># 平均分成3份</span></div><div class="line">g = np.split(np.arange(<span class="number">9</span>), <span class="number">3</span>)</div><div class="line">print(g)</div><div class="line"></div><div class="line"><span class="comment"># 按照下标位置进行划分</span></div><div class="line">h = np.split(np.arange(<span class="number">9</span>), [<span class="number">2</span>, <span class="number">-3</span>])</div><div class="line"></div><div class="line"><span class="comment"># 使用 for 操作元素</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.linspace(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>):</div><div class="line">    print(x)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[[2 3 4]</div><div class="line"> [5 6 7]]</div><div class="line">7</div><div class="line">[5 6 7]</div><div class="line">[6]</div><div class="line">[[ 2  3  4]</div><div class="line"> [ 8  9 10]]</div><div class="line">[array([0, 1, 2]), array([3, 4, 5]), array([6, 7, 8])]</div><div class="line">1.0</div><div class="line">2.0</div><div class="line">3.0</div></pre></td></tr></table></figure>
<h4 id="基本的数组运算"><a href="#基本的数组运算" class="headerlink" title="基本的数组运算"></a>基本的数组运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = np.ones((<span class="number">2</span>, <span class="number">2</span>))</div><div class="line">b = np.eye(<span class="number">2</span>)</div><div class="line">print(a&gt;<span class="number">2</span>)</div><div class="line">print(a+b)</div><div class="line">print(a-b)</div><div class="line">print(b*<span class="number">2</span>)</div><div class="line">print((a*<span class="number">2</span>)*(b*<span class="number">2</span>))</div><div class="line">print(b/(a*<span class="number">2</span>))</div><div class="line">print((a*<span class="number">2</span>)**<span class="number">4</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[[False False]</div><div class="line"> [False False]]</div><div class="line">[[ 2.  1.]</div><div class="line"> [ 1.  2.]]</div><div class="line">[[ 0.  1.]</div><div class="line"> [ 1.  0.]]</div><div class="line">[[ 2.  0.]</div><div class="line"> [ 0.  2.]]</div><div class="line">[[ 4.  0.]</div><div class="line"> [ 0.  4.]]</div><div class="line">[[ 0.5  0. ]</div><div class="line"> [ 0.   0.5]]</div><div class="line">[[ 16.  16.]</div><div class="line"> [ 16.  16.]]</div></pre></td></tr></table></figure>
<p>numerical python，基础数学运算也是强大的: </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">np.abs(<span class="number">-1</span>)   </div><div class="line">np.sin(np.pi/<span class="number">2</span>)  </div><div class="line">np.arctanh(<span class="number">0.462118</span>)</div><div class="line">d = np.exp(<span class="number">3</span>)</div><div class="line">f = np.power(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line">g = np.dot([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>])</div><div class="line">h = np.sqrt(<span class="number">25</span>)</div><div class="line">l = np.sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">m = np.mean([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</div><div class="line"><span class="comment"># 标准差</span></div><div class="line">p = np.std([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用数组对象自带的方法</span></div><div class="line">print(a.sum())</div><div class="line"><span class="comment"># 计算每一列的和（二维数组中类似于矩阵的列）的和</span></div><div class="line">print(a.sum(axis=<span class="number">0</span>))</div><div class="line"></div><div class="line">a.min()</div><div class="line">a.max()</div><div class="line">a.mean()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3.0</div><div class="line">[ 2.  1.]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.75</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用numpy下的方法：</span></div><div class="line">print(np.sin(a))</div><div class="line">print(np.max(a))</div><div class="line"><span class="comment"># 向下取整, 取不大于x的整数</span></div><div class="line">print(np.floor(a))</div><div class="line">print(np.exp(a))</div><div class="line"></div><div class="line"><span class="comment"># 矩阵乘法</span></div><div class="line">print(np.dot(a, a))</div><div class="line">print(<span class="string">'-----'</span>)</div><div class="line">print(a)</div><div class="line">print(b)</div><div class="line"><span class="comment"># 合并数组</span></div><div class="line"><span class="comment"># 使用numpy下的vstack和hstack函数：</span></div><div class="line"><span class="comment"># 只能同行同列</span></div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">vstack是指沿着纵轴拼接两个array，vertical</div><div class="line">hstack是指沿着横轴拼接两个array，horizontal</div><div class="line">更广义的拼接用concatenate实现，horizontal后的两句依次等效于vstack和hstack</div><div class="line">stack不是拼接而是在输入array的基础上增加一个新的维度</div><div class="line">'''</div><div class="line">r = np.concatenate((a, b), axis=<span class="number">-1</span>)</div><div class="line"></div><div class="line">c = np.vstack((a, b))</div><div class="line">print(c)</div><div class="line">d = np.hstack((a, b))</div><div class="line">print(d)</div><div class="line"></div><div class="line"><span class="comment"># 深拷贝</span></div><div class="line"><span class="comment"># 即更改 a b 数, c不会发生改变</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[[ 0.84147098  0.84147098]</div><div class="line"> [ 0.84147098  0.        ]]</div><div class="line">1.0</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  0.]]</div><div class="line">[[ 2.71828183  2.71828183]</div><div class="line"> [ 2.71828183  1.        ]]</div><div class="line">[[ 2.  1.]</div><div class="line"> [ 1.  1.]]</div><div class="line">-----</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  0.]]</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  0.]]</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  0.]</div><div class="line"> [ 1.  1.]</div><div class="line"> [ 1.  0.]]</div><div class="line">[[ 1.  1.  1.  1.]</div><div class="line"> [ 1.  0.  1.  0.]]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 数组对象自带了浅拷贝和深拷贝的方法，但是一般用深拷贝多一些</span></div><div class="line"><span class="comment"># 浅拷贝</span></div><div class="line">a = np.ones((<span class="number">2</span>, <span class="number">2</span>))</div><div class="line">b = a</div><div class="line">a[<span class="number">1</span>,<span class="number">1</span>] = <span class="number">4</span></div><div class="line">print(b <span class="keyword">is</span> a)</div><div class="line">print(b)</div><div class="line"></div><div class="line"><span class="comment"># 深拷贝</span></div><div class="line">c = a.copy()</div><div class="line">a[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">0</span></div><div class="line">print(c)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">True</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  4.]]</div><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  4.]]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 转置</span></div><div class="line">e = np.array([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span>]])</div><div class="line">print(e)</div><div class="line">print(e.transpose())</div><div class="line"><span class="comment"># 按指定轴进行转置</span></div><div class="line">t = e.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</div><div class="line"><span class="comment"># 逆时针旋转90度，第二个参数是旋转次数</span></div><div class="line">v = np.rot90(e, <span class="number">3</span>)</div><div class="line"><span class="comment"># 沿纵轴左右翻转</span></div><div class="line">w = np.fliplr(e)</div><div class="line"><span class="comment"># 沿水平轴上下翻转</span></div><div class="line">x = np.flipud(e)</div><div class="line"><span class="comment"># 按照一维顺序滚动位移</span></div><div class="line">y = np.roll(e, <span class="number">1</span>)</div><div class="line"><span class="comment"># 按照指定轴滚动位移</span></div><div class="line">z = np.roll(e, <span class="number">1</span>, axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># 迹</span></div><div class="line">np.trace(a)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[2 3]</div><div class="line"> [5 6]]</div><div class="line">[[2 5]</div><div class="line"> [3 6]]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.0</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># numpy.linalg模块中有很多关于矩阵运算的方法：</span></div><div class="line"><span class="keyword">import</span> numpy.linalg <span class="keyword">as</span> nplg</div><div class="line"></div><div class="line"><span class="comment"># 特征值 特征向量</span></div><div class="line">nplg.eig(a)</div><div class="line"></div><div class="line">print(a)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[ 1.  1.]</div><div class="line"> [ 1.  0.]]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])</div><div class="line"><span class="comment"># 每一列的最大值</span></div><div class="line">c.max(axis=<span class="number">1</span>)</div><div class="line"><span class="comment"># 每一行的均值</span></div><div class="line">c.mean(axis=<span class="number">0</span>) </div><div class="line"></div><div class="line"><span class="comment"># 展开一个numpy数组为1维数组，array([1, 2, 3, 4])</span></div><div class="line">c.flatten()</div><div class="line"><span class="comment"># 展开一个可以解析的结构为1维数组，array([1, 2, 3, 4]) </span></div><div class="line">np.ravel(c)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array([1, 2, 3, 4])</div></pre></td></tr></table></figure>
<h3 id="线性代数模块-linalg"><a href="#线性代数模块-linalg" class="headerlink" title="线性代数模块 (linalg)"></a>线性代数模块 (linalg)</h3><p>在深度学习相关的数据处理和运算中，线性代数模块（linalg）是最常用的之一. 结合numpy提供的基本函数，可以对向量，矩阵，或是说多维张量进行一些基本的运算. </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([<span class="number">3</span>, <span class="number">4</span>])</div><div class="line"></div><div class="line"><span class="comment"># norm则表示范数，首先需要注意的是范数是对向量（或者矩阵）的度量，是一个标量（scalar）：</span></div><div class="line">np.linalg.norm(a)</div><div class="line"></div><div class="line">b = np.array([</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</div><div class="line">    [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line">])</div><div class="line"></div><div class="line">c = np.array([<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment"># 矩阵和向量之间的乘法  ???</span></div><div class="line">np.dot(b, c)</div><div class="line">np.dot(c, b.T)</div><div class="line"></div><div class="line"><span class="comment"># 求矩阵的迹，15(一个n×n矩阵A的主对角线（从左上方至右下方的对角线）</span></div><div class="line"><span class="comment"># 上各个元素的总和被称为矩阵A的迹)</span></div><div class="line">np.trace(b)</div><div class="line"><span class="comment"># 求矩阵的行列式值，0</span></div><div class="line">np.linalg.det(b)</div><div class="line"><span class="comment"># 求矩阵的秩，2，不满秩，因为行与行之间等差</span></div><div class="line">np.linalg.matrix_rank(b)</div><div class="line"></div><div class="line">d = np.array([</div><div class="line">    [<span class="number">2</span>, <span class="number">1</span>],</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">])</div><div class="line"><span class="string">'''</span></div><div class="line">对正定矩阵求本征值和本征向量</div><div class="line">本征值为u，array([ 3.,  1.])</div><div class="line">本征向量构成的二维array为v，</div><div class="line">array([[ 0.70710678, -0.70710678],</div><div class="line">       [ 0.70710678,  0.70710678]])</div><div class="line">是沿着45°方向</div><div class="line">eig()是一般情况的本征值分解，对于更常见的对称实数矩阵，</div><div class="line">eigh()更快且更稳定，不过输出的值的顺序和eig()是相反的</div><div class="line">'''</div><div class="line"></div><div class="line">u, v = np.linalg.eig(d)</div><div class="line">print(u, v)</div><div class="line"></div><div class="line"><span class="comment"># Cholesky分解并重建</span></div><div class="line"><span class="comment"># 把一个对称正定的矩阵表示成一个下三角矩阵L和其转置的乘积的分解</span></div><div class="line">l = np.linalg.cholesky(d)</div><div class="line">np.dot(l, l.T)</div><div class="line"></div><div class="line">e = np.array([</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>],</div><div class="line">    [<span class="number">3</span>, <span class="number">4</span>]</div><div class="line">])</div><div class="line"></div><div class="line"><span class="comment"># 对不镇定矩阵，进行SVD分解(奇异值分解)并重建</span></div><div class="line">U, s, V = np.linalg.svd(e)</div><div class="line"></div><div class="line">S = np.array([</div><div class="line">   [s[<span class="number">0</span>], <span class="number">0</span>],</div><div class="line">    [<span class="number">0</span>, s[<span class="number">1</span>]]</div><div class="line">])</div><div class="line">np.dot(U, np.dot(S, V))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 3.  1.] [[ 0.70710678 -0.70710678]</div><div class="line"> [ 0.70710678  0.70710678]]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array([[ 1.,  2.],</div><div class="line">       [ 3.,  4.]])</div></pre></td></tr></table></figure>
<h3 id="随机模块（random）"><a href="#随机模块（random）" class="headerlink" title="随机模块（random）"></a>随机模块（random）</h3><p>包含了随机数产生和统计分布相关的基本函数, Python本身也有随机模块random，不过功能更丰富</p>
<p><strong>注意: 方法参数中都是规定产生随机数的数量(一维, 二维a*b)</strong>, 并非是产生的大小</p>
<h4 id="随机数产生"><a href="#随机数产生" class="headerlink" title="随机数产生"></a>随机数产生</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> numpy.random <span class="keyword">as</span> random</div><div class="line"></div><div class="line"><span class="comment"># 设置随机数种子</span></div><div class="line">random.seed(<span class="number">42</span>)</div><div class="line"><span class="comment"># 产生一个1x3 数组，[0,1)之间的浮点型随机数</span></div><div class="line">random.rand(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line"><span class="comment"># 产生一个[0,1)之间的浮点型随机数</span></div><div class="line">random.random()</div><div class="line"></div><div class="line"><span class="comment"># 下边4个没有区别，都是按照指定大小产生[0,1)之间的浮点型随机数array，不Pythonic…</span></div><div class="line">random.random((<span class="number">3</span>, <span class="number">3</span>))</div><div class="line">random.sample((<span class="number">3</span>, <span class="number">3</span>))</div><div class="line">random.random_sample((<span class="number">3</span>, <span class="number">3</span>))</div><div class="line">random.ranf((<span class="number">3</span>, <span class="number">3</span>))</div><div class="line"></div><div class="line"><span class="comment"># 产生10个[1,6)之间的浮点型随机数</span></div><div class="line"><span class="number">5</span>*random.random(<span class="number">10</span>) + <span class="number">1</span></div><div class="line"><span class="comment"># (3, 3)生成二维</span></div><div class="line">random.uniform(<span class="number">1</span>, <span class="number">6</span>, <span class="number">10</span>) </div><div class="line"></div><div class="line"><span class="comment"># 产生10个[1,6)之间的整型随机数</span></div><div class="line">random.randint(<span class="number">1</span>, <span class="number">6</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment"># 产生2x5的标准正态分布样本</span></div><div class="line">random.normal(size=(<span class="number">5</span>, <span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment"># 产生5个，n=5，p=0.5的二项分布样本</span></div><div class="line"></div><div class="line">random.binomial(n=<span class="number">5</span>, p=<span class="number">0.5</span>, size=<span class="number">5</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array([3, 4, 4, 2, 1])</div></pre></td></tr></table></figure>
<h4 id="统计分布"><a href="#统计分布" class="headerlink" title="统计分布"></a>统计分布</h4><p>对具体的样本数据进行与统计分布相关操作</p>
<blockquote>
<p>in-place操作，意思是所有的操作都是”就地“操作，不允许进行移动，或者称作 <strong>原位操作</strong>，即不允许使用临时变量。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">a = np.arange(<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="comment"># 从a中有回放的随机采样7个</span></div><div class="line">random.choice(a, <span class="number">7</span>)</div><div class="line"></div><div class="line"><span class="comment"># 从a中无回放的随机采样7个</span></div><div class="line">random.choice(a, <span class="number">7</span>, replace=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 对a进行乱序并返回一个新的array</span></div><div class="line">random.permutation(a)</div><div class="line"></div><div class="line"><span class="comment"># 对a进行in-place乱序</span></div><div class="line">random.shuffle(a)</div><div class="line">print(a)</div><div class="line"></div><div class="line"><span class="comment"># 生成一个长度为9的随机bytes序列并作为str返回</span></div><div class="line">random.bytes(<span class="number">9</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1 8 4 2 9 6 5 7 0 3]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b&apos;[4&amp;`a&#125;0\x94A&apos;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeetCode1541]]></title>
      <url>http://yoursite.com/2017/03/15/LeetCode%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="LeetCode-一"><a href="#LeetCode-一" class="headerlink" title="LeetCode(一)"></a><strong>LeetCode(一)</strong></h1><h3 id="Tag-Arrays-和Hash-1-15"><a href="#Tag-Arrays-和Hash-1-15" class="headerlink" title="Tag: Arrays 和Hash (1,15)"></a><strong>Tag: <code>Arrays</code> 和<code>Hash</code> (1,15)</strong></h3><h4 id="1-twoSum-返回目标值索引"><a href="#1-twoSum-返回目标值索引" class="headerlink" title="1. twoSum 返回目标值索引"></a><strong>1. twoSum 返回目标值索引</strong></h4><blockquote>
<p>本题学习过程帮助我了解vector, unordered_map和map</p>
</blockquote>
<p>我的思路: 先对vector<int>num进行sort排序, 进而头尾相加, 小于target则头指针加一; 大于则只尾指针减一; 等于跳出循环</int></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec(nums);</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result ;</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    <span class="keyword">int</span> a,b,c=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=nums.size()<span class="number">-1</span>; i&lt;=j; i++,j--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> temp = nums.at(i) + nums.at(j);</div><div class="line">        <span class="keyword">if</span>(temp &lt; target) &#123;j++;&#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp &gt; target)&#123;i--;&#125;</div><div class="line">        <span class="keyword">else</span> &#123;a=nums.at(i); b=nums.at(j);<span class="keyword">break</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;vec.size();k++)&#123;</div><div class="line">        <span class="keyword">if</span>(c==<span class="number">2</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(vec.at(k) == a) &#123;result.push_back(k);c++;</div><div class="line">            <span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(vec.at(k) == b) &#123;result.push_back(k);c++;</div><div class="line">            <span class="keyword">continue</span>;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>网上解答</em></p>
<p>Solution/*将n方复杂度的转换为linear, 主要是使用map追踪正确需要的数, 把需要的值存进map</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)&#123;</div><div class="line">  <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.size(); i++)&#123;</div><div class="line">    <span class="keyword">int</span> numToFind = target - nums[i];</div><div class="line">    <span class="keyword">if</span>(hash.find(numsToFind) != hash.end())&#123;</div><div class="line">      result.push_back(hash[numsToFind]);</div><div class="line">      result.push_back(i);</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    hash[nums[i]] = i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####<strong>3.  15. 3Sum</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">报错</div><div class="line">Runtime Error Message: reference binding to null pointer of type &apos;struct value_type&apos;</div><div class="line">原因: 没有验证输入是否为空数组(向量)</div><div class="line">解决:方法里加入if判断</div></pre></td></tr></table></figure>
<p>我的思路:  参照第一题, 先外层遍历i, target=0-nums[i], 在按照第一题的方法去做</p>
<p><strong>问题</strong>: 内层时需要考虑不中间返回, 以及去重问题, 耽误了我的时间复杂度, 😭😭😭</p>
<p>开始      <strong>但是,超时了</strong>妈个叽</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; hash; <span class="comment">//便于追踪正确值, 两个的情况</span></div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; skip; <span class="comment">//存放已测试的num[i],用于跳过</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; repeat;</div><div class="line">        <span class="keyword">if</span> (nums.size() &lt; <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size()<span class="number">-2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (skip.find(nums[i]) != skip.end()) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];</div><div class="line">            hash.clear();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++) &#123;</div><div class="line">                <span class="keyword">int</span> numToFind = target - nums[j];</div><div class="line">                <span class="keyword">if</span> (skip.find(nums[j]) != skip.end() || skip.find(numToFind) != skip.end()) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(hash.find(nums[j]) != hash.end())&#123;</div><div class="line">                    <span class="keyword">if</span>(numToFind != nums[j]) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">if</span>(repeat.find(numToFind) != repeat.end()) <span class="keyword">continue</span>;</div><div class="line">                    repeat.insert(numToFind);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (hash.find(numToFind) != hash.end()) &#123;</div><div class="line">                        tmp.push_back(numToFind);</div><div class="line">                        tmp.push_back(nums[j]);</div><div class="line">                        tmp.push_back(nums[i]);</div><div class="line">                        result.push_back(tmp);</div><div class="line">                        tmp.clear();</div><div class="line">                    &#125;</div><div class="line">                    hash.insert(nums[j]);</div><div class="line">            &#125;</div><div class="line">            skip.insert(nums[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改成能accepted, 然而复杂度不忍直视😂</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; hash; <span class="comment">//便于追踪正确值, 两个的情况</span></div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp; </div><div class="line">        <span class="keyword">if</span> (nums.size() &lt; <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        sort(nums.begin(), nums.end());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i - <span class="number">1</span>]) || i == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> target = <span class="number">0</span> - nums[i];</div><div class="line">                hash.clear();</div><div class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span>(j &lt; nums.size()) &#123;</div><div class="line">                   <span class="keyword">int</span> numToFind = target - nums[j];</div><div class="line">                    <span class="keyword">if</span>(hash.find(numToFind) != hash.end())&#123;</div><div class="line">                        tmp.push_back(numToFind);</div><div class="line">                        tmp.push_back(nums[j]);</div><div class="line">                        tmp.push_back(nums[i]);</div><div class="line">                        result.push_back(tmp);</div><div class="line">                        tmp.clear();</div><div class="line">                        <span class="keyword">while</span>(j &lt; nums.size()<span class="number">-1</span> &amp;&amp; nums[j] == nums[j+<span class="number">1</span>]) j++;</div><div class="line">                        j++;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> hash.insert(nums[j++]);</div><div class="line">               &#125;</div><div class="line">    <span class="comment">//            for(it = hash.begin(); it!=hash.end(); it++)&#123;cout&lt;&lt;*it&lt;&lt;"  ";&#125;</span></div><div class="line">            &#125;</div><div class="line">    <span class="comment">//        cout&lt;&lt;endl;</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>参照网上的答案更改过后:</p>
<p><strong>问题明白两点</strong>    </p>
<ul>
<li>排序,先对给定数组进行排序 </li>
<li>有时, while循环比for循环更好用  优势在于更好的控制每一次 i+1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum2(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums) &#123;</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i == <span class="number">0</span> || (i &gt; <span class="number">0</span> &amp;&amp; nums[i] != nums[i<span class="number">-1</span>]))&#123;</div><div class="line">            <span class="keyword">int</span> lo = i + <span class="number">1</span>, hi= nums.size() - <span class="number">1</span>, sum = <span class="number">0</span> - nums[i];</div><div class="line">            <span class="keyword">while</span> (lo &lt; hi)&#123;</div><div class="line">              <span class="comment">//第一次允许, 以后通过排序直接跳过可能的重复</span></div><div class="line">                <span class="keyword">if</span> (nums[lo] + nums[hi] ==  sum)&#123;</div><div class="line">                    tmp.push_back(nums[i]);</div><div class="line">                    tmp.push_back(nums[lo]);</div><div class="line">                    tmp.push_back(nums[hi]);</div><div class="line">                    res.push_back(tmp);</div><div class="line">                    tmp.clear();</div><div class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + <span class="number">1</span>]) 					lo++;</div><div class="line">                    <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - <span class="number">1</span>]) 					hi--;</div><div class="line">                    lo++; hi--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[lo] + nums[hi] &lt; sum) lo++;</div><div class="line">                <span class="keyword">else</span> hi--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>char<em> p = “test”; 这个声明，声明了一个指针，而这个指针指向的是<em>*全局的const内存区</em></em>，const内存区当然不会让你想改就改的。</p>
<h4 id="541-Reverse-String-II"><a href="#541-Reverse-String-II" class="headerlink" title="541.Reverse String II"></a><strong>541.Reverse String II</strong></h4><p>问题描述：一串小写字符，分<k, k<s<2k,="" s="">2k几种情况，每2k个字符第k个逆转到开头,k范围[1, 10000]</k,></p>
<p><strong>小问题</strong>(是我理解的问题还是)</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="function"><span class="built_in">string</span> <span class="title">reverseStr</span><span class="params">(String str, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> left=<span class="number">0</span>; left&lt;str.size; left+= <span class="number">2</span>*k)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=left,j=min(left+k<span class="number">-1</span>, <span class="keyword">int</span>(s.size()<span class="number">-1</span>)); i&lt;j; i++,j--)</div><div class="line">        &#123;</div><div class="line">          swap(s[i], s[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[范数]]></title>
      <url>http://yoursite.com/2017/03/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%91%A8%E4%B9%8B%E8%8C%83%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>机器学习?(ノへ￣、)</p>
<a id="more"></a>
<h4 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a><strong>向量范数</strong></h4><p>min∑(f(x)-y)^2+正则表达(范数解决过拟合问题)</p>
<ol>
<li><p>L0 特征选择, 非0元素稀疏, 缺点是难优化</p>
</li>
<li><p>L1  可以直接使得元素值为0从而容易稀疏</p>
</li>
<li><p>L2  岭回归  最小化L2范数,可以使得x的元素值都很小, 但都不是0</p>
<p>最小二乘L2范数优化, 凸优化方法</p>
<blockquote>
<p>优点: </p>
<p> 1) 改善”过拟合”overfitting—新样本表现很差(长发问题)</p>
<p>2) 利于优化  机器学习中有时候损失函数是非凸的, 例如: 神经网络, 梯度下降之类的方法遇见</p>
</blockquote>
</li>
</ol>
<h4 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a><strong>矩阵范数</strong></h4><ol>
<li><p>1-范数  列范数最大 变成向量</p>
</li>
<li><p>2-范数  谱范数 难优化 求特征值</p>
</li>
<li><p>F-范数: (∑i=1,m∑j1,n aij^2)^1/2</p>
<p>最小化矩阵的f范数,会使得矩阵的每个元素都很小,近0</p>
<p>||A-B||F    A,B矩阵尽可能相同 应用字典学习</p>
</li>
<li><p>核范数—-矩阵奇异值的和  </p>
<p>最小化可以导致矩阵低秩  </p>
<p>矩阵的秩—-矩阵线性不相关的行数  去除冗余</p>
<p>不好求所以 近似 是核范数   </p>
<p>应用 推荐系统,低秩  奇异值分解   /鲁棒PCA 重构为低秩+噪声, 不在原始图像上降维</p>
</li>
<li><p>2,1范数 按列求2范数(平方开根)再求1范数, 整列(列向量)稀疏(全0)</p>
<p>Lasso 找出关键词  Group Lasso使一组为0,找出关键句子   Hierarchical Lasso找出关键段</p>
<p>应用:文本分类</p>
</li>
<li><p>1,2范数 按列1(每一列可能有好多0)再2(不稀疏保证了每一列不为0,进而保证了每一列中的每一行不可全为0,平方和开根不为0), 使得行内元素互斥, 行内有0元素但不可能全0</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac Linux文件系统]]></title>
      <url>http://yoursite.com/2016/07/15/mac%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h3 id="mac-文件系统"><a href="#mac-文件系统" class="headerlink" title="mac 文件系统"></a><strong>mac 文件系统</strong></h3><p>隐藏<br>cmd中ls /</p>
<h4 id="符合unix传统的目录"><a href="#符合unix传统的目录" class="headerlink" title="符合unix传统的目录"></a><strong>符合unix传统的目录</strong></h4><p>/bin 传统unix命令的存放目录，如ls，rm，mv等。<br>/sbin 传统unix管理类命令存放目录，如fdisk，ifconfig等等。<br>/usr 第三方程序安装目录。<br>/usr/bin, /usr/sbin, /usr/lib，其中/usr/lib目录中存放了共享库（动态链接库）.<br>/etc. 标准unix系统配置文件存放目录，如用户密码文件/etc/passwd。此目录实际为指向/private/etc的链接。<br>/dev 设备文件存放目录，如何代表硬盘的/dev/disk0。<br>/tmp 临时文件存放目录，其权限为所有人任意读写。此目录实际为指向/private/tmp的链接。<br>/var 存放经常变化的文件，如日志文件。此目录实际为指向/private/var的链接。</p>
<h4 id="os-x特有的目录"><a href="#os-x特有的目录" class="headerlink" title="os x特有的目录"></a><strong>os x特有的目录</strong></h4><p>/Applications 应用程序目录，默认所有的GUI应用程序都安装在这里；<br>/Library 系统的数据文件、帮助文件、文档等等；<br>/Network 网络节点存放目录；<br>/System 他只包含一个名为Library的目录，这个子目录中存放了系统的绝大部分组件，如各种framework，以及内核模块，字体文件等等。<br>/Users 存放用户的个人资料和配置。每个用户有自己的单独目录。<br>/Volumes 文件系统挂载点存放目录。<br>/cores 内核转储文件存放目录。当一个进程崩溃时，如果系统允许则会产生转储文件。<br>/private 里面的子目录存放了/tmp, /var, /etc等链接目录的目标目录。</p>
<p>OS X发生崩溃和不能启动的概率实在是太低了，就算是系统出现问题，由于用户目录和系统目录是彼此独立的，所以也容易找回。<br>所以通常情况下，用户直接把资料存放在自己的用户目录中</p>
<h3 id="Linux-文件系统"><a href="#Linux-文件系统" class="headerlink" title="Linux 文件系统"></a>Linux 文件系统</h3><p>形式表现上一体——所有数据目录均为根目录下的子目录<br>实质——多个不同的<strong>【逻辑主体】</strong>（为了实现不同的逻辑功能）组合在一起</p>
<h4 id="文件系统结构标准"><a href="#文件系统结构标准" class="headerlink" title="文件系统结构标准"></a><strong>文件系统结构标准</strong></h4><h5 id="LINUX系统的数据文件分类——双重标准"><a href="#LINUX系统的数据文件分类——双重标准" class="headerlink" title="LINUX系统的数据文件分类——双重标准"></a><strong>LINUX系统的数据文件分类——双重标准</strong></h5><p>共享的与独享的（shareable vs. unshareable）<br>数据与平台不相关，如/usr （共享） 数据是平台相关的，如配置数据/etc。变化的和静态的（variable vs. static）<br>相对非管理员用户而言的，没有更变的权限 （静态）</p>
<h5 id="Linux根文件系统逻辑组成"><a href="#Linux根文件系统逻辑组成" class="headerlink" title="Linux根文件系统逻辑组成"></a><strong>Linux根文件系统逻辑组成</strong></h5><p>（以具体目录表现逻辑功能）/ ——根目录（专用的静态的“根本所在”）/usr ——（共享的静态的）/var——（动态的共享的）/opt/home</p>
<h5 id="根目录必选组成目录"><a href="#根目录必选组成目录" class="headerlink" title="根目录必选组成目录"></a><strong>根目录必选组成目录</strong></h5><blockquote>
<p>/bin 基本工具或命令<br>/sbin 系统管理工具或命令<br>/etc 主机相关（Host-speciﬁc）的配置数据<br>/lib 基本共享库和内核模块<br>/dev 设备文件<br>/boot 引导程序<br>/root 管理员的工作目录<br>/mnt 系统管理员的临时挂接点<br>/tmp 系统级临时文件<br>/media 移动设备挂接点</p>
</blockquote>
<h5 id="usr-目录"><a href="#usr-目录" class="headerlink" title="/usr 目录"></a><strong>/usr 目录</strong></h5><p>/usr 目录是系统的一大组成部分，共享的静态的</p>
<p>静态：普通用户不可更改/usr下数据<br>共享：/usr下数据与主机平台不相关，代码独立于运行主机<br>/usr必选组成目录/usr/bin Most user commands<br>/usr/include Header ﬁles included by C programs<br>/usr/blib Libraries<br>/usr/local Local hierarchy (empty after main installation)<br>/usr/sbin Non-vital system binaries<br>/usr/share Architecture-independent data</p>
<h5 id="var目录"><a href="#var目录" class="headerlink" title="/var目录"></a><strong>/var目录</strong></h5><p>/var基本上是动态的和共享的（少量是主机相关的，如/var/log）。<br>/var保存大部分是程序运行期的动态生成数据</p>
]]></content>
    </entry>
    
  
  
</search>
